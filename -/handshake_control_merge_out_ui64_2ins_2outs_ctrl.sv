// Generated by CIRCT unknown git version
module handshake_control_merge_out_ui64_2ins_2outs_ctrl(
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
  // input  /*Zero Width*/ in1,
     input                 in1_valid,
                           clock,
                           reset,
                           dataOut_ready,
                           index_ready,
     output                in0_ready,
                           in1_ready,
  // output /*Zero Width*/ dataOut,
     output                dataOut_valid,
     output [63:0]         index,
     output                index_valid
);

  wire       _GEN;
  wire       _GEN_0;
  wire       _GEN_1;
  wire [1:0] _GEN_2;
  reg  [1:0] won_reg;
  reg        result_emitted_reg;
  reg        index_emitted_reg;
  always_ff @(posedge clock) begin
    if (reset) begin
      won_reg <= 2'h0;
      result_emitted_reg <= 1'h0;
      index_emitted_reg <= 1'h0;
    end
    else begin
      won_reg <= _GEN ? 2'h0 : _GEN_2;
      result_emitted_reg <= ~_GEN & _GEN_1;
      index_emitted_reg <= ~_GEN & _GEN_0;
    end
  end // always_ff @(posedge)
  assign _GEN_2 = (|won_reg) ? won_reg : in0_valid ? 2'h1 : {in1_valid, 1'h0};
  wire       _GEN_3 = (|_GEN_2) & ~result_emitted_reg;
  wire       _GEN_4 = (|_GEN_2) & ~index_emitted_reg;
  assign _GEN_1 = _GEN_3 & dataOut_ready | result_emitted_reg;
  assign _GEN_0 = _GEN_4 & index_ready | index_emitted_reg;
  assign _GEN = _GEN_1 & _GEN_0;
  wire [1:0] _GEN_5 = _GEN ? _GEN_2 : 2'h0;
  assign in0_ready = _GEN_5 == 2'h1;
  assign in1_ready = _GEN_5 == 2'h2;
  // Zero width: assign dataOut = /*Zero width*/;
  assign dataOut_valid = _GEN_3;
  assign index = {63'h0, _GEN_2[1]};
  assign index_valid = _GEN_4;
endmodule

