// Generated by CIRCT unknown git version
module handshake_memory_out_ui64_id0(
     input  [63:0]         stData0,
     input                 stData0_valid,
     input  [63:0]         stAddr0,
     input                 stAddr0_valid,
     input  [63:0]         stData1,
     input                 stData1_valid,
     input  [63:0]         stAddr1,
     input                 stAddr1_valid,
     input  [63:0]         stData2,
     input                 stData2_valid,
     input  [63:0]         stAddr2,
     input                 stAddr2_valid,
     input  [63:0]         stData3,
     input                 stData3_valid,
     input  [63:0]         stAddr3,
     input                 stAddr3_valid,
     input  [63:0]         stData4,
     input                 stData4_valid,
     input  [63:0]         stAddr4,
     input                 stAddr4_valid,
     input  [63:0]         stData5,
     input                 stData5_valid,
     input  [63:0]         stAddr5,
     input                 stAddr5_valid,
     input  [63:0]         stData6,
     input                 stData6_valid,
     input  [63:0]         stAddr6,
     input                 stAddr6_valid,
     input  [63:0]         stData7,
     input                 stData7_valid,
     input  [63:0]         stAddr7,
     input                 stAddr7_valid,
     input  [63:0]         stData8,
     input                 stData8_valid,
     input  [63:0]         stAddr8,
     input                 stAddr8_valid,
     input  [63:0]         stData9,
     input                 stData9_valid,
     input  [63:0]         stAddr9,
     input                 stAddr9_valid,
     input  [63:0]         stData10,
     input                 stData10_valid,
     input  [63:0]         stAddr10,
     input                 stAddr10_valid,
     input  [63:0]         stData11,
     input                 stData11_valid,
     input  [63:0]         stAddr11,
     input                 stAddr11_valid,
     input  [63:0]         stData12,
     input                 stData12_valid,
     input  [63:0]         stAddr12,
     input                 stAddr12_valid,
     input  [63:0]         stData13,
     input                 stData13_valid,
     input  [63:0]         stAddr13,
     input                 stAddr13_valid,
     input  [63:0]         stData14,
     input                 stData14_valid,
     input  [63:0]         stAddr14,
     input                 stAddr14_valid,
     input  [63:0]         stData15,
     input                 stData15_valid,
     input  [63:0]         stAddr15,
     input                 stAddr15_valid,
     input  [63:0]         ldAddr0,
     input                 ldAddr0_valid,
                           clock,
                           reset,
                           ldData0_ready,
                           stDone0_ready,
                           stDone1_ready,
                           stDone2_ready,
                           stDone3_ready,
                           stDone4_ready,
                           stDone5_ready,
                           stDone6_ready,
                           stDone7_ready,
                           stDone8_ready,
                           stDone9_ready,
                           stDone10_ready,
                           stDone11_ready,
                           stDone12_ready,
                           stDone13_ready,
                           stDone14_ready,
                           stDone15_ready,
                           ldDone0_ready,
     output                stData0_ready,
                           stAddr0_ready,
                           stData1_ready,
                           stAddr1_ready,
                           stData2_ready,
                           stAddr2_ready,
                           stData3_ready,
                           stAddr3_ready,
                           stData4_ready,
                           stAddr4_ready,
                           stData5_ready,
                           stAddr5_ready,
                           stData6_ready,
                           stAddr6_ready,
                           stData7_ready,
                           stAddr7_ready,
                           stData8_ready,
                           stAddr8_ready,
                           stData9_ready,
                           stAddr9_ready,
                           stData10_ready,
                           stAddr10_ready,
                           stData11_ready,
                           stAddr11_ready,
                           stData12_ready,
                           stAddr12_ready,
                           stData13_ready,
                           stAddr13_ready,
                           stData14_ready,
                           stAddr14_ready,
                           stData15_ready,
                           stAddr15_ready,
                           ldAddr0_ready,
     output [63:0]         ldData0,
     output                ldData0_valid,
  // output /*Zero Width*/ stDone0,
     output                stDone0_valid,
  // output /*Zero Width*/ stDone1,
     output                stDone1_valid,
  // output /*Zero Width*/ stDone2,
     output                stDone2_valid,
  // output /*Zero Width*/ stDone3,
     output                stDone3_valid,
  // output /*Zero Width*/ stDone4,
     output                stDone4_valid,
  // output /*Zero Width*/ stDone5,
     output                stDone5_valid,
  // output /*Zero Width*/ stDone6,
     output                stDone6_valid,
  // output /*Zero Width*/ stDone7,
     output                stDone7_valid,
  // output /*Zero Width*/ stDone8,
     output                stDone8_valid,
  // output /*Zero Width*/ stDone9,
     output                stDone9_valid,
  // output /*Zero Width*/ stDone10,
     output                stDone10_valid,
  // output /*Zero Width*/ stDone11,
     output                stDone11_valid,
  // output /*Zero Width*/ stDone12,
     output                stDone12_valid,
  // output /*Zero Width*/ stDone13,
     output                stDone13_valid,
  // output /*Zero Width*/ stDone14,
     output                stDone14_valid,
  // output /*Zero Width*/ stDone15,
     output                stDone15_valid,
  // output /*Zero Width*/ ldDone0,
     output                ldDone0_valid
);

  wire        emptyOrComplete;
  reg  [63:0] _handshake_memory_0[0:15];
  reg         emitted_0;
  wire        _GEN = ~emitted_0 & ldAddr0_valid;
  wire        done0 = ldData0_ready & _GEN | emitted_0;
  reg         emitted_1;
  wire        _GEN_0 = ~emitted_1 & ldAddr0_valid;
  wire        done1 = ldDone0_ready & _GEN_0 | emitted_1;
  wire        allDone = done0 & done1;
  reg         writeValidBuffer;
  wire        emptyOrComplete_0 = ~writeValidBuffer | stDone0_ready & writeValidBuffer;
  reg         writeValidBuffer_0;
  wire        emptyOrComplete_1 =
    ~writeValidBuffer_0 | stDone1_ready & writeValidBuffer_0;
  reg         writeValidBuffer_1;
  wire        emptyOrComplete_2 =
    ~writeValidBuffer_1 | stDone2_ready & writeValidBuffer_1;
  reg         writeValidBuffer_2;
  wire        emptyOrComplete_3 =
    ~writeValidBuffer_2 | stDone3_ready & writeValidBuffer_2;
  reg         writeValidBuffer_3;
  wire        emptyOrComplete_4 =
    ~writeValidBuffer_3 | stDone4_ready & writeValidBuffer_3;
  reg         writeValidBuffer_4;
  wire        emptyOrComplete_5 =
    ~writeValidBuffer_4 | stDone5_ready & writeValidBuffer_4;
  reg         writeValidBuffer_5;
  wire        emptyOrComplete_6 =
    ~writeValidBuffer_5 | stDone6_ready & writeValidBuffer_5;
  reg         writeValidBuffer_6;
  wire        emptyOrComplete_7 =
    ~writeValidBuffer_6 | stDone7_ready & writeValidBuffer_6;
  reg         writeValidBuffer_7;
  wire        emptyOrComplete_8 =
    ~writeValidBuffer_7 | stDone8_ready & writeValidBuffer_7;
  reg         writeValidBuffer_8;
  wire        emptyOrComplete_9 =
    ~writeValidBuffer_8 | stDone9_ready & writeValidBuffer_8;
  reg         writeValidBuffer_9;
  wire        emptyOrComplete_10 =
    ~writeValidBuffer_9 | stDone10_ready & writeValidBuffer_9;
  reg         writeValidBuffer_10;
  wire        emptyOrComplete_11 =
    ~writeValidBuffer_10 | stDone11_ready & writeValidBuffer_10;
  reg         writeValidBuffer_11;
  wire        emptyOrComplete_12 =
    ~writeValidBuffer_11 | stDone12_ready & writeValidBuffer_11;
  reg         writeValidBuffer_12;
  wire        emptyOrComplete_13 =
    ~writeValidBuffer_12 | stDone13_ready & writeValidBuffer_12;
  reg         writeValidBuffer_13;
  wire        emptyOrComplete_14 =
    ~writeValidBuffer_13 | stDone14_ready & writeValidBuffer_13;
  reg         writeValidBuffer_14;
  always_ff @(posedge clock) begin
    if (reset) begin
      emitted_0 <= 1'h0;
      emitted_1 <= 1'h0;
      writeValidBuffer <= 1'h0;
      writeValidBuffer_0 <= 1'h0;
      writeValidBuffer_1 <= 1'h0;
      writeValidBuffer_2 <= 1'h0;
      writeValidBuffer_3 <= 1'h0;
      writeValidBuffer_4 <= 1'h0;
      writeValidBuffer_5 <= 1'h0;
      writeValidBuffer_6 <= 1'h0;
      writeValidBuffer_7 <= 1'h0;
      writeValidBuffer_8 <= 1'h0;
      writeValidBuffer_9 <= 1'h0;
      writeValidBuffer_10 <= 1'h0;
      writeValidBuffer_11 <= 1'h0;
      writeValidBuffer_12 <= 1'h0;
      writeValidBuffer_13 <= 1'h0;
      writeValidBuffer_14 <= 1'h0;
    end
    else begin
      automatic logic writeValid = stAddr0_valid & stData0_valid;
      automatic logic writeValid_0 = stAddr1_valid & stData1_valid;
      automatic logic writeValid_1 = stAddr2_valid & stData2_valid;
      automatic logic writeValid_2 = stAddr3_valid & stData3_valid;
      automatic logic writeValid_3 = stAddr4_valid & stData4_valid;
      automatic logic writeValid_4 = stAddr5_valid & stData5_valid;
      automatic logic writeValid_5 = stAddr6_valid & stData6_valid;
      automatic logic writeValid_6 = stAddr7_valid & stData7_valid;
      automatic logic writeValid_7 = stAddr8_valid & stData8_valid;
      automatic logic writeValid_8 = stAddr9_valid & stData9_valid;
      automatic logic writeValid_9 = stAddr10_valid & stData10_valid;
      automatic logic writeValid_10 = stAddr11_valid & stData11_valid;
      automatic logic writeValid_11 = stAddr12_valid & stData12_valid;
      automatic logic writeValid_12 = stAddr13_valid & stData13_valid;
      automatic logic writeValid_13 = stAddr14_valid & stData14_valid;
      automatic logic writeValid_14 = stAddr15_valid & stData15_valid;
      if (writeValid_14)
        _handshake_memory_0[stAddr15[3:0]] <= stData15;
      if (writeValid_13)
        _handshake_memory_0[stAddr14[3:0]] <= stData14;
      if (writeValid_12)
        _handshake_memory_0[stAddr13[3:0]] <= stData13;
      if (writeValid_11)
        _handshake_memory_0[stAddr12[3:0]] <= stData12;
      if (writeValid_10)
        _handshake_memory_0[stAddr11[3:0]] <= stData11;
      if (writeValid_9)
        _handshake_memory_0[stAddr10[3:0]] <= stData10;
      if (writeValid_8)
        _handshake_memory_0[stAddr9[3:0]] <= stData9;
      if (writeValid_7)
        _handshake_memory_0[stAddr8[3:0]] <= stData8;
      if (writeValid_6)
        _handshake_memory_0[stAddr7[3:0]] <= stData7;
      if (writeValid_5)
        _handshake_memory_0[stAddr6[3:0]] <= stData6;
      if (writeValid_4)
        _handshake_memory_0[stAddr5[3:0]] <= stData5;
      if (writeValid_3)
        _handshake_memory_0[stAddr4[3:0]] <= stData4;
      if (writeValid_2)
        _handshake_memory_0[stAddr3[3:0]] <= stData3;
      if (writeValid_1)
        _handshake_memory_0[stAddr2[3:0]] <= stData2;
      if (writeValid_0)
        _handshake_memory_0[stAddr1[3:0]] <= stData1;
      if (writeValid)
        _handshake_memory_0[stAddr0[3:0]] <= stData0;
      emitted_0 <= done0 & ~allDone;
      emitted_1 <= done1 & ~allDone;
      writeValidBuffer <= emptyOrComplete_0 ? writeValid : writeValidBuffer;
      writeValidBuffer_0 <= emptyOrComplete_1 ? writeValid_0 : writeValidBuffer_0;
      writeValidBuffer_1 <= emptyOrComplete_2 ? writeValid_1 : writeValidBuffer_1;
      writeValidBuffer_2 <= emptyOrComplete_3 ? writeValid_2 : writeValidBuffer_2;
      writeValidBuffer_3 <= emptyOrComplete_4 ? writeValid_3 : writeValidBuffer_3;
      writeValidBuffer_4 <= emptyOrComplete_5 ? writeValid_4 : writeValidBuffer_4;
      writeValidBuffer_5 <= emptyOrComplete_6 ? writeValid_5 : writeValidBuffer_5;
      writeValidBuffer_6 <= emptyOrComplete_7 ? writeValid_6 : writeValidBuffer_6;
      writeValidBuffer_7 <= emptyOrComplete_8 ? writeValid_7 : writeValidBuffer_7;
      writeValidBuffer_8 <= emptyOrComplete_9 ? writeValid_8 : writeValidBuffer_8;
      writeValidBuffer_9 <= emptyOrComplete_10 ? writeValid_9 : writeValidBuffer_9;
      writeValidBuffer_10 <= emptyOrComplete_11 ? writeValid_10 : writeValidBuffer_10;
      writeValidBuffer_11 <= emptyOrComplete_12 ? writeValid_11 : writeValidBuffer_11;
      writeValidBuffer_12 <= emptyOrComplete_13 ? writeValid_12 : writeValidBuffer_12;
      writeValidBuffer_13 <= emptyOrComplete_14 ? writeValid_13 : writeValidBuffer_13;
      writeValidBuffer_14 <= emptyOrComplete ? writeValid_14 : writeValidBuffer_14;
    end
  end // always_ff @(posedge)
  assign emptyOrComplete = ~writeValidBuffer_14 | stDone15_ready & writeValidBuffer_14;
  assign stData0_ready = emptyOrComplete_0;
  assign stAddr0_ready = emptyOrComplete_0;
  assign stData1_ready = emptyOrComplete_1;
  assign stAddr1_ready = emptyOrComplete_1;
  assign stData2_ready = emptyOrComplete_2;
  assign stAddr2_ready = emptyOrComplete_2;
  assign stData3_ready = emptyOrComplete_3;
  assign stAddr3_ready = emptyOrComplete_3;
  assign stData4_ready = emptyOrComplete_4;
  assign stAddr4_ready = emptyOrComplete_4;
  assign stData5_ready = emptyOrComplete_5;
  assign stAddr5_ready = emptyOrComplete_5;
  assign stData6_ready = emptyOrComplete_6;
  assign stAddr6_ready = emptyOrComplete_6;
  assign stData7_ready = emptyOrComplete_7;
  assign stAddr7_ready = emptyOrComplete_7;
  assign stData8_ready = emptyOrComplete_8;
  assign stAddr8_ready = emptyOrComplete_8;
  assign stData9_ready = emptyOrComplete_9;
  assign stAddr9_ready = emptyOrComplete_9;
  assign stData10_ready = emptyOrComplete_10;
  assign stAddr10_ready = emptyOrComplete_10;
  assign stData11_ready = emptyOrComplete_11;
  assign stAddr11_ready = emptyOrComplete_11;
  assign stData12_ready = emptyOrComplete_12;
  assign stAddr12_ready = emptyOrComplete_12;
  assign stData13_ready = emptyOrComplete_13;
  assign stAddr13_ready = emptyOrComplete_13;
  assign stData14_ready = emptyOrComplete_14;
  assign stAddr14_ready = emptyOrComplete_14;
  assign stData15_ready = emptyOrComplete;
  assign stAddr15_ready = emptyOrComplete;
  assign ldAddr0_ready = allDone;
  assign ldData0 = _handshake_memory_0[ldAddr0[3:0]];
  assign ldData0_valid = _GEN;
  // Zero width: assign stDone0 = /*Zero width*/;
  assign stDone0_valid = writeValidBuffer;
  // Zero width: assign stDone1 = /*Zero width*/;
  assign stDone1_valid = writeValidBuffer_0;
  // Zero width: assign stDone2 = /*Zero width*/;
  assign stDone2_valid = writeValidBuffer_1;
  // Zero width: assign stDone3 = /*Zero width*/;
  assign stDone3_valid = writeValidBuffer_2;
  // Zero width: assign stDone4 = /*Zero width*/;
  assign stDone4_valid = writeValidBuffer_3;
  // Zero width: assign stDone5 = /*Zero width*/;
  assign stDone5_valid = writeValidBuffer_4;
  // Zero width: assign stDone6 = /*Zero width*/;
  assign stDone6_valid = writeValidBuffer_5;
  // Zero width: assign stDone7 = /*Zero width*/;
  assign stDone7_valid = writeValidBuffer_6;
  // Zero width: assign stDone8 = /*Zero width*/;
  assign stDone8_valid = writeValidBuffer_7;
  // Zero width: assign stDone9 = /*Zero width*/;
  assign stDone9_valid = writeValidBuffer_8;
  // Zero width: assign stDone10 = /*Zero width*/;
  assign stDone10_valid = writeValidBuffer_9;
  // Zero width: assign stDone11 = /*Zero width*/;
  assign stDone11_valid = writeValidBuffer_10;
  // Zero width: assign stDone12 = /*Zero width*/;
  assign stDone12_valid = writeValidBuffer_11;
  // Zero width: assign stDone13 = /*Zero width*/;
  assign stDone13_valid = writeValidBuffer_12;
  // Zero width: assign stDone14 = /*Zero width*/;
  assign stDone14_valid = writeValidBuffer_13;
  // Zero width: assign stDone15 = /*Zero width*/;
  assign stDone15_valid = writeValidBuffer_14;
  // Zero width: assign ldDone0 = /*Zero width*/;
  assign ldDone0_valid = _GEN_0;
endmodule

