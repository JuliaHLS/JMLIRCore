// Generated by CIRCT unknown git version
module handshake_buffer_2slots_seq_1ins_1outs_ctrl(	// -:2:3
  // input  /*Zero Width*/ in0,
     input                 in0_valid,
                           clock,
                           reset,
                           out0_ready,
     output                in0_ready,
  // output /*Zero Width*/ out0,
     output                out0_valid
);

  reg  ready1_reg;	// -:2:3
  reg  ready0_reg;	// -:2:3
  reg  valid0_reg;	// -:2:3
  wire _GEN = ~valid0_reg | ~ready0_reg;	// -:2:3
  reg  valid1_reg;	// -:2:3
  wire _GEN_0 = ~valid1_reg | ~ready1_reg;	// -:2:3
  always_ff @(posedge clock) begin	// -:2:3
    if (reset) begin	// -:2:3
      valid0_reg <= 1'h0;	// -:2:3
      ready0_reg <= 1'h0;	// -:2:3
      valid1_reg <= 1'h0;	// -:2:3
      ready1_reg <= 1'h0;	// -:2:3
    end
    else begin	// -:2:3
      valid0_reg <= _GEN ? in0_valid : valid0_reg;	// -:2:3
      ready0_reg <=
        ~(_GEN_0 & ready0_reg) & (~_GEN_0 & ~ready0_reg ? valid0_reg : ready0_reg);	// -:2:3
      valid1_reg <= _GEN_0 ? (ready0_reg ? ready0_reg : valid0_reg) : valid1_reg;	// -:2:3
      ready1_reg <=
        ~(out0_ready & ready1_reg)
        & (~out0_ready & ~ready1_reg ? valid1_reg : ready1_reg);	// -:2:3
    end
  end // always_ff @(posedge)
  assign in0_ready = _GEN;	// -:2:3
  // Zero width: assign out0 = /*Zero width*/;	// -:2:3
  assign out0_valid = ready1_reg ? ready1_reg : valid1_reg;	// -:2:3
endmodule

